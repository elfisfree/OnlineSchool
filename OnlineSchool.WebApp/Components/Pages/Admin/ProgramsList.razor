@page "/admin/programs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OnlineSchool.Shared.DTOs
@using OnlineSchool.WebApp.Services
@attribute [Authorize(Roles = "Admin")]
@inject IProgramService ProgramService
@inject NavigationManager NavigationManager

@* Получаем состояние аутентификации *@
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @* Этот блок показывается, только когда пользователь авторизован *@
            <h3>Образовательные программы</h3>

            <p>
                <a href="/admin/program/create" class="btn btn-success">Создать новую программу</a>
            </p>

            @if (isLoading)
            {
                <p><em>Загрузка...</em></p>
            }
            else if (programs != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Название</th>
                            <th>Описание</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var program in programs)
                        {
                            <tr>
                                <td><a href="@($"/admin/program/{program.Id}")">@program.Name</a></td>
                                <td>@program.Description</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => DeleteProgram(program.Id)">Удалить</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Authorized>
        <NotAuthorized>
            <p>Вы должны войти в систему, чтобы просматривать эту страницу.</p>
        </NotAuthorized>
        <Authorizing>
            <p><em>Проверка авторизации...</em></p>
        </Authorizing>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<ProgramDto> programs;
    private bool isLoading = true; // Флаг для контроля загрузки

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        // Начинаем загрузку данных ТОЛЬКО ЕСЛИ пользователь аутентифицирован
        if (user.Identity.IsAuthenticated)
        {
            isLoading = true;
            programs = await ProgramService.GetProgramsAsync();
            isLoading = false;
        }
    }
    
    // Метод EditProgram больше не нужен, так как мы сделали ссылку
    
    private async Task DeleteProgram(int id)
    {
        await ProgramService.DeleteProgramAsync(id);
        
        // Перезагружаем данные после удаления
        isLoading = true;
        programs = await ProgramService.GetProgramsAsync();
        isLoading = false;
    }
}