@page "/admin/group/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using OnlineSchool.Shared.DTOs
@using OnlineSchool.WebApp.Services
@attribute [Authorize(Roles = "Admin")]
@inject IGroupService GroupService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<h3>Детали группы</h3>

@if (group == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="card mb-4">
        <div class="card-header">
            <h5>@group.Name</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item"><strong>Программа:</strong> @group.ProgramName</li>
            <li class="list-group-item"><strong>Преподаватель:</strong> @group.TeacherName</li>
        </ul>
    </div>

    <h4>Ученики в группе (@group.Students.Count)</h4>
    @if (group.Students.Any())
    {
        <ul class="list-group mb-4">
            @foreach (var student in group.Students)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@student.FullName (@student.Email)</span>

                    @* --- ДОБАВЛЯЕМ КНОПКУ УДАЛЕНИЯ --- *@
                    <button class="btn btn-danger btn-sm" @onclick="() => HandleRemoveStudent(student.Id)">
                        Удалить
                    </button>
                </li>
            }
        </ul>
    }
    else
    {
        <p>В этой группе пока нет учеников.</p>
    }

    <hr />

    <h4>Добавить ученика в группу</h4>
    @if (allStudents != null)
    {
        <div class="input-group">
            <select @bind="selectedStudentId" class="form-select">
                <option value="">-- Выберите ученика --</option>
                @foreach (var student in allStudents)
                {
                    <option value="@student.Id">@student.FullName (@student.Email)</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="HandleAddStudent" disabled="@(string.IsNullOrEmpty(selectedStudentId))">
                Добавить
            </button>
        </div>
    }
    else
    {
        <p><em>Загрузка списка учеников...</em></p>
    }

    <h4>Расписание занятий</h4>

    @if (schedule != null && schedule.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Дата и время</th>
                    <th>Урок</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var scheduledLesson in schedule)
                {
                    <tr>
                        <td>@scheduledLesson.ScheduledDateTime.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@scheduledLesson.LessonTitle</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Расписание для этой группы еще не создано.</p>
    }

    <div class="card bg-light mt-4">
        <div class="card-body">
            <h5 class="card-title">Сгенерировать расписание</h5>
            <EditForm Model="scheduleDto" OnValidSubmit="HandleGenerateSchedule">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Дата начала</label>
                        <InputDate @bind-Value="startDateForPicker" class="form-control" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Время начала</label>
                        <InputDate Type="InputDateType.Time" @bind-Value="scheduleTime" class="form-control" />
                    </div>
                </div>
                <button type="submit" class="btn btn-warning">Сгенерировать (перезапишет существующее)</button>
            </EditForm>
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private GroupDetailDto group;
    private List<UserDto> allStudents;
    private string selectedStudentId;
    private List<ScheduledLessonDto> schedule;
    private ScheduleGenerationDto scheduleDto = new ScheduleGenerationDto();
    private DateTime startDateForPicker = DateTime.Today.AddDays(1);
    // private DateTime scheduleDate = DateTime.Today.AddDays(1);
    private DateTime scheduleTime = new DateTime(1, 1, 1, 19, 0, 0);

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupDetails();
        await LoadSchedule();
        // Загружаем список всех студентов для выпадающего списка
        allStudents = await UserService.GetUsersByRoleAsync("Student");
    }

    private async Task LoadSchedule()
    {
        schedule = await GroupService.GetScheduleAsync(Id);
    }

    private async Task HandleGenerateSchedule()
    {
        var dtoToSend = new ScheduleGenerationDto
        {
            StartDate = startDateForPicker.Date,
            StartTime = scheduleTime.TimeOfDay,
            // Дни недели остаются по умолчанию
        };

        await GroupService.GenerateScheduleAsync(Id, dtoToSend);
        // await LoadSchedule();
        // StateHasChanged();
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task LoadGroupDetails()
    {
        group = await GroupService.GetGroupDetailsAsync(Id);
    }

    private async Task HandleAddStudent()
    {
        if (string.IsNullOrEmpty(selectedStudentId)) return;

        await GroupService.AddStudentToGroupAsync(Id, selectedStudentId);

        // Сбрасываем выбор и перезагружаем детали группы, чтобы увидеть нового ученика
        selectedStudentId = string.Empty;
        await LoadGroupDetails();
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task HandleRemoveStudent(string studentId)
    {
        // Здесь тоже можно добавить подтверждение
        await GroupService.RemoveStudentFromGroupAsync(Id, studentId);
        await LoadGroupDetails(); // Перезагружаем детали, чтобы обновить список
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}